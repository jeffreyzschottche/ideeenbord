--- IdeaNotifier.vue ---
<script setup lang="ts">
/*
  Fetches and displays idea-related notifications for a user.
  Filters only relevant types ("idea_status" and "idea_like").
  Triggered on component mount, based on the username in the route.
*/

import { ref, onMounted } from "vue";
import { useRoute } from "vue-router";
import { apiFetch } from "~/composables/useApi";
import type { Idea, IdeaNotification } from "~/types/idea";

// Extract username (slug) from current route
const route = useRoute();
const username = route.params.slug as string;

// Reactive state for notifications and loading state
const notifications = ref<IdeaNotification[]>([]);
const loading = ref(true);

// Fetch notifications once the component is mounted
onMounted(async () => {
  try {
    const data = await apiFetch<{ notifications: IdeaNotification[] }>(
      `/users/${username}/notifications`
    );

    // Only keep relevant notification types
    notifications.value = data.notifications.filter((n: any) =>
      ["idea_status", "idea_like"].includes(n.type)
    );
  } finally {
    loading.value = false;
  }
});
</script>

<template>
  <div>
    <h3 class="font-semibold text-lg mb-2">üìù Idee-meldingen</h3>

    <!-- Display list of filtered notifications -->
    <ul v-if="notifications.length">
      <li
        v-for="n in notifications"
        :key="n.timestamp"
        class="mb-2 border-b pb-2"
      >
        {{ n.message }}
        <br />
        <small class="text-gray-500">
          {{ new Date(n.timestamp).toLocaleString() }}
        </small>
      </li>
    </ul>

    <!-- Fallback message if no notifications found -->
    <p v-else>Geen meldingen over jouw idee√´n.</p>
  </div>
</template>


--- Inbox.vue ---
<script setup lang="ts">
/*
  Displays the user's inbox containing notifications about quizzes and ideas.
  Ensures the authenticated user is loaded before showing content.
*/

import { useUserAuthStore } from "~/store/useUserAuthStore";
import { onMounted, ref } from "vue";
import QuizNotifier from "~/components/user/QuizNotifier.vue";
import IdeaNotifier from "~/components/user/IdeaNotifier.vue";

// Auth store to access current user and token
const auth = useUserAuthStore();
const loaded = ref(false);

// Wait until authentication is initialized before rendering inbox
onMounted(async () => {
  if (!auth.user || !auth.token) {
    await auth.initAuth();
  }
  loaded.value = true;
});
</script>

<template>
  <!-- Inbox view with quiz and idea notifications -->
  <div class="mt-8" v-if="loaded && auth.user">
    <h2 class="text-xl font-bold mb-4">üì• Inbox</h2>
    <QuizNotifier />
    <IdeaNotifier />
  </div>
</template>


--- QuizNotifier.vue ---
<script setup lang="ts">
/*
  Fetches and displays quiz-related notifications for the current user.
  Filters out only notifications of type "quiz", based on username from route.
*/

import { onMounted, ref } from "vue";
import { useRoute } from "vue-router";
import { apiFetch } from "~/composables/useApi";
import type { UserNotification } from "~/types/user";

// Get the username (slug) from the current route
const route = useRoute();
const username = route.params.slug as string;

// State for quiz notifications and loading status
const notifications = ref<UserNotification[]>([]);
const loading = ref(true);

// Load quiz-related notifications on mount
onMounted(async () => {
  try {
    const data: UserNotification[] = await apiFetch(
      `/users/${username}/notifications`
    );

    // Only keep quiz notifications
    notifications.value = data.filter((n: any) => n.type === "quiz");
  } finally {
    loading.value = false;
  }
});
</script>

<template>
  <div>
    <h3 class="font-semibold text-lg mb-2">Quizmeldingen</h3>

    <!-- Show list if there are any quiz notifications -->
    <ul v-if="notifications.length">
      <li v-for="n in notifications" :key="n.timestamp">üß† {{ n.message }}</li>
    </ul>

    <!-- Fallback if no notifications available -->
    <p v-else>Geen quizmeldingen</p>
  </div>
</template>


--- UserIdeasPosted.vue ---
<script setup lang="ts">
/*
  Fetches and displays all ideas posted by a specific user.
  The username is taken from the route (slug).
  Shows loading and error states, and triggers a UI message on failure.
*/

import { ref, onMounted } from "vue";
import { useRoute } from "vue-router";
import { apiFetch } from "~/composables/useApi";
import { useResponseDisplay } from "~/composables/useResponseDisplay";

const route = useRoute();
const username = route.params.slug as string;
const { triggerByKey } = useResponseDisplay();

// Reactive state for fetched ideas and status
const ideas = ref<any[]>([]);
const loading = ref(true);
const error = ref<string | null>(null);

// Fetch posted ideas when the component is mounted
onMounted(async () => {
  try {
    const ideaData: any = await apiFetch(`/users/${username}/ideas`);
    ideas.value = ideaData;
  } catch (e: any) {
    triggerByKey("ideas-fetch-failed");
  } finally {
    loading.value = false;
  }
});
</script>

<template>
  <div class="mt-8">
    <h2 class="text-xl font-bold mb-2">üí° Idee√´n die je hebt gepost</h2>

    <!-- Loading state -->
    <p v-if="loading">Laden...</p>

    <!-- Error message -->
    <p v-if="error">{{ error }}</p>

    <!-- Display posted ideas -->
    <ul v-if="ideas.length">
      <li v-for="idea in ideas" :key="idea.id" class="mb-2">
        <NuxtLink
          :to="`/brands/${idea.brand?.slug}`"
          class="font-bold text-lg text-blue-800 hover:underline"
        >
          {{ idea.title }}
        </NuxtLink>
        <br />
        <i>Status : {{ idea.status }}</i>
        <i>Likes : {{ idea.likes }}</i>
        <i>Dislikes : {{ idea.dislikes }}</i>
        <i>
          Bij merk:
          <NuxtLink
            :to="`/brands/${idea.brand?.slug}`"
            class="text-blue-600 underline"
          >
            {{ idea.brand?.slug }}
          </NuxtLink>
        </i>
        <br />
        <span class="text-sm text-gray-600">{{ idea.description }}</span>
      </li>
    </ul>

    <!-- Fallback when no ideas are found -->
    <p v-else-if="!loading">Je hebt nog geen idee√´n gepost.</p>
  </div>
</template>


--- UserProfileEdit.vue ---
<script setup lang="ts">
/*
  Handles user profile editing.
  Initializes a reactive form with current user data.
  Submits updates to the API, excluding empty or unchanged fields.
  Also handles optional password change.
*/

import { ref, watch } from "vue";
import { useUserAuthStore } from "~/store/useUserAuthStore";
import { apiFetch } from "~/composables/useApi";
import { useResponseDisplay } from "~/composables/useResponseDisplay";

const auth = useUserAuthStore();
const { triggerByKey } = useResponseDisplay();

// Form state and UI flags
const form = ref<Record<string, any>>({});
const saving = ref(false);
const showPassword = ref(false);

/*
  Watch the authenticated user and populate the form fields accordingly.
  Empty strings are used as fallbacks to avoid uncontrolled inputs.
*/
watch(
  () => auth.user,
  (newUser) => {
    if (newUser) {
      form.value = {
        name: newUser.name ?? "",
        email: newUser.email ?? "",
        username: newUser.username ?? "",
        gender: newUser.gender ?? "",
        education_level: newUser.education_level ?? "",
        education: newUser.education ?? "",
        job: newUser.job ?? "",
        sector: newUser.sector ?? "",
        city: newUser.city ?? "",
        relationship_status: newUser.relationship_status ?? "",
        postal_code: newUser.postal_code ?? "",
        password: "",
      };
    }
  },
  { immediate: true }
);

/*
  Submit updated profile data.
  Empty password fields are ignored.
  Fields with null/undefined are excluded from the payload.
*/
async function updateProfile() {
  saving.value = true;

  try {
    const filteredBody = Object.fromEntries(
      Object.entries(form.value).filter(([key, value]) => {
        if (key === "password" && value === "") return false;
        return value !== null && value !== undefined;
      })
    );

    const updated: any = await apiFetch(`/users/${auth.user.username}`, {
      method: "PATCH",
      body: filteredBody,
    });

    auth.user = updated.user; // Update local auth state with new user data
    triggerByKey("profile-updated"); // Trigger success message
  } catch (e) {
    triggerByKey("profile-update-failed"); // Trigger error message
  } finally {
    saving.value = false;
  }
}
</script>

<template>
  <form @submit.prevent="updateProfile" class="space-y-4 mt-8">
    <h2 class="text-xl font-bold">üõ†Ô∏è Profiel bijwerken</h2>

    <div
      v-for="(field, label) in {
        name: 'Naam',
        email: 'E-mail',
        username: 'Gebruikersnaam',
        gender: 'Gender',
        education_level: 'Opleidingsniveau',
        education: 'Studie',
        job: 'Beroep',
        sector: 'Sector',
        city: 'Woonplaats',
        relationship_status: 'Relatiestatus',
        postal_code: 'Postcode',
      }"
      :key="label"
    >
      <label :for="label" class="block font-medium mb-1">{{ field }}</label>
      <input v-model="form[label]" :id="label" type="text" class="input" />
    </div>

    <div>
      <label for="password" class="block font-medium mb-1">
        Nieuw wachtwoord (optioneel)
      </label>
      <small class="text-gray-500"
        >Laat leeg als je je wachtwoord niet wil wijzigen</small
      >
      <div class="relative">
        <input
          v-model="form.password"
          :type="showPassword ? 'text' : 'password'"
          id="password"
          class="input pr-10"
        />
      </div>
    </div>

    <button
      type="submit"
      class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
      :disabled="saving"
    >
      {{ saving ? "Opslaan..." : "Opslaan" }}
    </button>
  </form>
</template>

<style scoped>
.input {
  display: block;
  width: 100%;
  padding: 0.5rem;
  border: 1px solid #ddd;
  border-radius: 0.25rem;
}
</style>


--- UserQuizzes.vue ---
<script setup lang="ts">
/*
  Fetches and displays current and past quiz participations for a user.
  The username is extracted from the route.
  Shows active and closed quiz entries in two separate lists.
*/

import { ref, onMounted } from "vue";
import { useRoute } from "vue-router";
import { apiFetch } from "~/composables/useApi";

// Extract username (slug) from the route
const route = useRoute();
const username = route.params.slug as string;

// Reactive state for quiz lists and UI states
const currentQuizzes = ref([]);
const pastQuizzes = ref([]);
const loading = ref(true);
const error = ref<string | null>(null);

// Fetch quiz participation data on mount
onMounted(async () => {
  try {
    const data = await apiFetch<{ current: any[]; past: any[] }>(
      `/users/${username}/quiz-submissions`
    );
    currentQuizzes.value = data.current;
    pastQuizzes.value = data.past;
  } catch (e: any) {
    error.value = e.message || "Quizdata ophalen mislukt.";
  } finally {
    loading.value = false;
  }
});
</script>

<template>
  <div>
    <h2 class="text-xl font-bold mb-2">üì¢ Huidige Winacties</h2>

    <!-- List of ongoing quizzes -->
    <ul v-if="currentQuizzes.length">
      <li v-for="quiz in currentQuizzes" :key="quiz.id">
        ‚úÖ <strong>{{ quiz.title }}</strong> bij
        <NuxtLink :to="`/brands/${quiz.brand.title}`">
          {{ quiz.brand.title }}
        </NuxtLink>
      </li>
    </ul>
    <p v-else>Geen actieve winacties op dit moment.</p>

    <h2 class="text-xl font-bold mt-6 mb-2">‚õî Afgelopen Winacties</h2>

    <!-- List of past (closed) quizzes -->
    <ul v-if="pastQuizzes.length">
      <li v-for="quiz in pastQuizzes" :key="quiz.id">
        üïë <strong>{{ quiz.title }}</strong> bij
        <NuxtLink :to="`/brands/${quiz.brand.title}`">
          {{ quiz.brand.title }}
        </NuxtLink>
        (gesloten)
      </li>
    </ul>
    <p v-else>Geen eerdere deelnames.</p>

    <!-- Loading and error states -->
    <p v-if="loading">Laden...</p>
    <p v-if="error">{{ error }}</p>
  </div>
</template>


--- UserRatingsInsights.vue ---
<script setup lang="ts">
/*
  Shows an overview of ideas the user has liked or disliked.
  Fetches idea details based on the user's liked_posts and disliked_posts IDs.
*/

import { ref, onMounted } from "vue";
import { useUserAuthStore } from "~/store/useUserAuthStore";
import { apiFetch } from "~/composables/useApi";

// Auth store and state
const auth = useUserAuthStore();
const likedIdeas = ref<any[]>([]);
const dislikedIdeas = ref<any[]>([]);
const loading = ref(true);
const error = ref<string | null>(null);

// Fetch liked and disliked ideas on mount
onMounted(async () => {
  try {
    if (!auth.user) {
      await auth.initAuth();
    }

    const likedIds = auth.user?.liked_posts || [];
    const dislikedIds = auth.user?.disliked_posts || [];

    if (likedIds.length > 0) {
      likedIdeas.value = await apiFetch(`/ideas`, {
        method: "GET",
        params: { ids: likedIds.join(",") },
      });
    }

    if (dislikedIds.length > 0) {
      dislikedIdeas.value = await apiFetch(`/ideas`, {
        method: "GET",
        params: { ids: dislikedIds.join(",") },
      });
    }
  } catch (err: any) {
    error.value = err?.message || "Fout bij laden van idee√´n";
  } finally {
    loading.value = false;
  }
});
</script>

<template>
  <div>
    <h2>üü¢ Liked Ideas</h2>
    <ul v-if="likedIdeas.length">
      <li v-for="idea in likedIdeas" :key="idea.id">
        ‚úÖ <strong>{{ idea.title }}</strong> (status: {{ idea.status }})
        <span v-if="idea.brand">
          ‚Äì bij
          <NuxtLink :to="`/brands/${idea.brand.title}`">
            {{ idea.brand.title }}
          </NuxtLink>
        </span>
      </li>
    </ul>
    <p v-else>Nog geen idee√´n geliked.</p>

    <h2>üî¥ Disliked Ideas</h2>
    <ul v-if="dislikedIdeas.length">
      <li v-for="idea in dislikedIdeas" :key="idea.id">
        üö´ <strong>{{ idea.title }}</strong> (status: {{ idea.status }})
        <span v-if="idea.brand">
          ‚Äì bij
          <NuxtLink :to="`/brands/${idea.brand.title}`">
            {{ idea.brand.title }}
          </NuxtLink>
        </span>
      </li>
    </ul>
    <p v-else>Nog geen idee√´n gedisliked.</p>

    <p v-if="loading">Laden...</p>
    <p v-if="error">{{ error }}</p>
  </div>
</template>


